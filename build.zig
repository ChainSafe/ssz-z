// This file is generated by zbuild. Do not edit manually.

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const dep_snappy = b.dependency("snappy", .{});

    const dep_yaml = b.dependency("yaml", .{});

    const write_files_codegen = b.addWriteFiles();

    const options_build_options = b.addOptions();
    const option_zero_hash_max_depth = b.option(usize, "zero_hash_max_depth", "");
    options_build_options.addOption(?usize, "zero_hash_max_depth", option_zero_hash_max_depth);
    const options_module_build_options = options_build_options.createModule();

    const options_spec_test_options = b.addOptions();
    const option_spec_test_url = b.option([]const u8, "spec_test_url", "") orelse "https://github.com/ethereum/consensus-spec-tests";
    options_spec_test_options.addOption([]const u8, "spec_test_url", option_spec_test_url);
    const option_spec_test_version = b.option([]const u8, "spec_test_version", "") orelse "v1.5.0-beta.2";
    options_spec_test_options.addOption([]const u8, "spec_test_version", option_spec_test_version);
    const option_spec_test_out_dir = b.option([]const u8, "spec_test_out_dir", "") orelse "test/spec/spec_tests";
    options_spec_test_options.addOption([]const u8, "spec_test_out_dir", option_spec_test_out_dir);
    const options_module_spec_test_options = options_spec_test_options.createModule();

    const module_hex = b.createModule(.{
        .root_source_file = b.path("src/hex.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("hex"), module_hex) catch @panic("OOM");

    const @"module_persistent-merkle-tree" = b.createModule(.{
        .root_source_file = b.path("src/persistent-merkle-tree/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("persistent-merkle-tree"), @"module_persistent-merkle-tree") catch @panic("OOM");

    const module_ssz = b.createModule(.{
        .root_source_file = b.path("src/ssz/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("ssz"), module_ssz) catch @panic("OOM");

    const module_types_codegen = b.createModule(.{
        .root_source_file = b.path("test/lodestar_types/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("types_codegen"), module_types_codegen) catch @panic("OOM");

    const exe_types_codegen = b.addExecutable(.{
        .name = "types_codegen",
        .root_module = module_types_codegen,
    });

    const install_exe_types_codegen = b.addInstallArtifact(exe_types_codegen, .{});
    const tls_install_exe_types_codegen = b.step("build-exe:types_codegen", "Install the types_codegen executable");
    tls_install_exe_types_codegen.dependOn(&install_exe_types_codegen.step);
    b.getInstallStep().dependOn(&install_exe_types_codegen.step);

    const run_exe_types_codegen = b.addRunArtifact(exe_types_codegen);
    if (b.args) |args| run_exe_types_codegen.addArgs(args);
    const tls_run_exe_types_codegen = b.step("run:types_codegen", "Run the types_codegen executable");
    tls_run_exe_types_codegen.dependOn(&run_exe_types_codegen.step);

    const module_download_spec_tests = b.createModule(.{
        .root_source_file = b.path("test/spec/download_spec_tests.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("download_spec_tests"), module_download_spec_tests) catch @panic("OOM");

    const exe_download_spec_tests = b.addExecutable(.{
        .name = "download_spec_tests",
        .root_module = module_download_spec_tests,
    });

    const install_exe_download_spec_tests = b.addInstallArtifact(exe_download_spec_tests, .{});
    const tls_install_exe_download_spec_tests = b.step("build-exe:download_spec_tests", "Install the download_spec_tests executable");
    tls_install_exe_download_spec_tests.dependOn(&install_exe_download_spec_tests.step);
    b.getInstallStep().dependOn(&install_exe_download_spec_tests.step);

    const run_exe_download_spec_tests = b.addRunArtifact(exe_download_spec_tests);
    if (b.args) |args| run_exe_download_spec_tests.addArgs(args);
    const tls_run_exe_download_spec_tests = b.step("run:download_spec_tests", "Run the download_spec_tests executable");
    tls_run_exe_download_spec_tests.dependOn(&run_exe_download_spec_tests.step);

    const module_types = b.createModule(.{
        .root_source_file = write_files_codegen.getDirectory().path(b, "types"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("types"), module_types) catch @panic("OOM");

    const lib_types = b.addLibrary(.{
        .name = "types",
        .root_module = module_types,
    });

    const install_lib_types = b.addInstallArtifact(lib_types, .{});
    const tls_install_lib_types = b.step("build-lib:types", "Install the types library");
    tls_install_lib_types.dependOn(&install_lib_types.step);
    b.getInstallStep().dependOn(&install_lib_types.step);

    const tls_run_test = b.step("test", "Run all tests");

    const test_hex = b.addTest(.{
        .name = "hex",
        .root_module = module_hex,
        .filters = &[_][]const u8{  },
    });
    const install_test_hex = b.addInstallArtifact(test_hex, .{});
    const tls_install_test_hex = b.step("build-test:hex", "Install the hex test");
    tls_install_test_hex.dependOn(&install_test_hex.step);

    const run_test_hex = b.addRunArtifact(test_hex);
    const tls_run_test_hex = b.step("test:hex", "Run the hex test");
    tls_run_test_hex.dependOn(&run_test_hex.step);
    tls_run_test.dependOn(&run_test_hex.step);

    const @"test_persistent-merkle-tree" = b.addTest(.{
        .name = "persistent-merkle-tree",
        .root_module = @"module_persistent-merkle-tree",
        .filters = &[_][]const u8{  },
    });
    const @"install_test_persistent-merkle-tree" = b.addInstallArtifact(@"test_persistent-merkle-tree", .{});
    const @"tls_install_test_persistent-merkle-tree" = b.step("build-test:persistent-merkle-tree", "Install the persistent-merkle-tree test");
    @"tls_install_test_persistent-merkle-tree".dependOn(&@"install_test_persistent-merkle-tree".step);

    const @"run_test_persistent-merkle-tree" = b.addRunArtifact(@"test_persistent-merkle-tree");
    const @"tls_run_test_persistent-merkle-tree" = b.step("test:persistent-merkle-tree", "Run the persistent-merkle-tree test");
    @"tls_run_test_persistent-merkle-tree".dependOn(&@"run_test_persistent-merkle-tree".step);
    tls_run_test.dependOn(&@"run_test_persistent-merkle-tree".step);

    const test_ssz = b.addTest(.{
        .name = "ssz",
        .root_module = module_ssz,
        .filters = &[_][]const u8{  },
    });
    const install_test_ssz = b.addInstallArtifact(test_ssz, .{});
    const tls_install_test_ssz = b.step("build-test:ssz", "Install the ssz test");
    tls_install_test_ssz.dependOn(&install_test_ssz.step);

    const run_test_ssz = b.addRunArtifact(test_ssz);
    const tls_run_test_ssz = b.step("test:ssz", "Run the ssz test");
    tls_run_test_ssz.dependOn(&run_test_ssz.step);
    tls_run_test.dependOn(&run_test_ssz.step);

    const test_types_codegen = b.addTest(.{
        .name = "types_codegen",
        .root_module = module_types_codegen,
        .filters = &[_][]const u8{  },
    });
    const install_test_types_codegen = b.addInstallArtifact(test_types_codegen, .{});
    const tls_install_test_types_codegen = b.step("build-test:types_codegen", "Install the types_codegen test");
    tls_install_test_types_codegen.dependOn(&install_test_types_codegen.step);

    const run_test_types_codegen = b.addRunArtifact(test_types_codegen);
    const tls_run_test_types_codegen = b.step("test:types_codegen", "Run the types_codegen test");
    tls_run_test_types_codegen.dependOn(&run_test_types_codegen.step);
    tls_run_test.dependOn(&run_test_types_codegen.step);

    const test_download_spec_tests = b.addTest(.{
        .name = "download_spec_tests",
        .root_module = module_download_spec_tests,
        .filters = &[_][]const u8{  },
    });
    const install_test_download_spec_tests = b.addInstallArtifact(test_download_spec_tests, .{});
    const tls_install_test_download_spec_tests = b.step("build-test:download_spec_tests", "Install the download_spec_tests test");
    tls_install_test_download_spec_tests.dependOn(&install_test_download_spec_tests.step);

    const run_test_download_spec_tests = b.addRunArtifact(test_download_spec_tests);
    const tls_run_test_download_spec_tests = b.step("test:download_spec_tests", "Run the download_spec_tests test");
    tls_run_test_download_spec_tests.dependOn(&run_test_download_spec_tests.step);
    tls_run_test.dependOn(&run_test_download_spec_tests.step);

    const test_types = b.addTest(.{
        .name = "types",
        .root_module = module_types,
        .filters = &[_][]const u8{  },
    });
    const install_test_types = b.addInstallArtifact(test_types, .{});
    const tls_install_test_types = b.step("build-test:types", "Install the types test");
    tls_install_test_types.dependOn(&install_test_types.step);

    const run_test_types = b.addRunArtifact(test_types);
    const tls_run_test_types = b.step("test:types", "Run the types test");
    tls_run_test_types.dependOn(&run_test_types.step);
    tls_run_test.dependOn(&run_test_types.step);

    const module_int = b.createModule(.{
        .root_source_file = b.path("test/int/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("int"), module_int) catch @panic("OOM");

    const test_int = b.addTest(.{
        .name = "int",
        .root_module = module_int,
        .filters = &[_][]const u8{  },
    });
    const install_test_int = b.addInstallArtifact(test_int, .{});
    const tls_install_test_int = b.step("build-test:int", "Install the int test");
    tls_install_test_int.dependOn(&install_test_int.step);

    const run_test_int = b.addRunArtifact(test_int);
    const tls_run_test_int = b.step("test:int", "Run the int test");
    tls_run_test_int.dependOn(&run_test_int.step);
    tls_run_test.dependOn(&run_test_int.step);

    const module_lodestar_types = b.createModule(.{
        .root_source_file = b.path("test/lodestar_types/root.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("lodestar_types"), module_lodestar_types) catch @panic("OOM");

    const test_lodestar_types = b.addTest(.{
        .name = "lodestar_types",
        .root_module = module_lodestar_types,
        .filters = &[_][]const u8{  },
    });
    const install_test_lodestar_types = b.addInstallArtifact(test_lodestar_types, .{});
    const tls_install_test_lodestar_types = b.step("build-test:lodestar_types", "Install the lodestar_types test");
    tls_install_test_lodestar_types.dependOn(&install_test_lodestar_types.step);

    const run_test_lodestar_types = b.addRunArtifact(test_lodestar_types);
    const tls_run_test_lodestar_types = b.step("test:lodestar_types", "Run the lodestar_types test");
    tls_run_test_lodestar_types.dependOn(&run_test_lodestar_types.step);
    tls_run_test.dependOn(&run_test_lodestar_types.step);

    const module_spec_tests = b.createModule(.{
        .root_source_file = b.path("test/spec/general_tests.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.modules.put(b.dupe("spec_tests"), module_spec_tests) catch @panic("OOM");

    const test_spec_tests = b.addTest(.{
        .name = "spec_tests",
        .root_module = module_spec_tests,
        .filters = &[_][]const u8{  },
    });
    const install_test_spec_tests = b.addInstallArtifact(test_spec_tests, .{});
    const tls_install_test_spec_tests = b.step("build-test:spec_tests", "Install the spec_tests test");
    tls_install_test_spec_tests.dependOn(&install_test_spec_tests.step);

    const run_test_spec_tests = b.addRunArtifact(test_spec_tests);
    const tls_run_test_spec_tests = b.step("test:spec_tests", "Run the spec_tests test");
    tls_run_test_spec_tests.dependOn(&run_test_spec_tests.step);
    tls_run_test.dependOn(&run_test_spec_tests.step);

    _ = write_files_codegen.addCopyFile(run_exe_types_codegen.captureStdOut(), "types");

    @"module_persistent-merkle-tree".addImport("build_options", options_module_build_options);
    @"module_persistent-merkle-tree".addImport("hex", module_hex);

    module_ssz.addImport("build_options", options_module_build_options);
    module_ssz.addImport("hex", module_hex);
    module_ssz.addImport("persistent-merkle-tree", @"module_persistent-merkle-tree");

    module_types_codegen.addImport("ssz", module_ssz);

    module_download_spec_tests.addImport("spec_test_options", options_module_spec_test_options);

    module_int.addImport("hex", module_hex);
    module_int.addImport("ssz", module_ssz);

    module_lodestar_types.addImport("ssz", module_ssz);

    module_spec_tests.addImport("hex", module_hex);
    module_spec_tests.addImport("snappy", dep_snappy.module("snappy"));
    module_spec_tests.addImport("ssz", module_ssz);
    module_spec_tests.addImport("spec_test_options", options_module_spec_test_options);
    module_spec_tests.addImport("yaml", dep_yaml.module("yaml"));

}
