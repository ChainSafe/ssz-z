// This file is generated by write_general_tests.zig.
// Do not commit changes by hand.

const std = @import("std");
const spec_test_options = @import("spec_test_options");
const types = @import("generic_types.zig");
const test_case = @import("test_case.zig");

const generic_tests_dir_name = "general/tests/general/phase0/ssz_generic";
const allocator = std.testing.allocator;

test "Valid - uint_256_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_last_byte_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_last_byte_empty",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_32_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_32_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_32, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_64_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_64_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_64, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_8_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_8_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_8, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_256_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_256_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_256, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_128_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_128_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_128, allocator, test_dir, "meta.yaml");
}

test "Valid - uint_16_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints/valid/uint_16_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.uint_16, allocator, test_dir, "meta.yaml");
}

test "Invalid - uint_16_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_16_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_16, allocator, test_dir);
}

test "Invalid - uint_64_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_64_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_64, allocator, test_dir);
}

test "Invalid - uint_64_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_64_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_64, allocator, test_dir);
}

test "Invalid - uint_64_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_64_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_64, allocator, test_dir);
}

test "Invalid - uint_32_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_32_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_32, allocator, test_dir);
}

test "Invalid - uint_128_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_128_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_128, allocator, test_dir);
}

test "Invalid - uint_8_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_8_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_8, allocator, test_dir);
}

test "Invalid - uint_256_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_256_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_256, allocator, test_dir);
}

test "Invalid - uint_256_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_256_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_256, allocator, test_dir);
}

test "Invalid - uint_256_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_256_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_256, allocator, test_dir);
}

test "Invalid - uint_128_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_128_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_128, allocator, test_dir);
}

test "Invalid - uint_16_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_16_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_16, allocator, test_dir);
}

test "Invalid - uint_32_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_32_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_32, allocator, test_dir);
}

test "Invalid - uint_16_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_16_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_16, allocator, test_dir);
}

test "Invalid - uint_128_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_128_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_128, allocator, test_dir);
}

test "Invalid - uint_8_one_too_high" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_8_one_too_high"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_8, allocator, test_dir);
}

test "Invalid - uint_32_one_byte_shorter" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_32_one_byte_shorter"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_32, allocator, test_dir);
}

test "Invalid - uint_8_one_byte_longer" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "uints",
        "invalid",
        "uint_8_one_byte_longer"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.uint_8, allocator, test_dir);
}

test "Valid - vec_uint8_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_4, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_bool_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_bool_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_bool_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_3, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_5, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint32_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint32_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint32_512, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_31, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_8, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint128_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint128_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint128_513, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint16_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint16_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint16_16, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint8_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint8_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint8_1, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint256_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint256_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint256_2, allocator, test_dir, "meta.yaml");
}

test "Valid - vec_uint64_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector/valid/vec_uint64_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.vec_uint64_5, allocator, test_dir, "meta.yaml");
}

test "Invalid - vec_uint128_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint128_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint8_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_bool_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint32_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint16_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint32_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint32_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint128_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint16_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint8_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint8_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint16_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint16_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint256_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_bool_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint64_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint16_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint8_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_bool_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint256_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint16_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint128_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint32_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint64_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint128_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint8_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint64_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint8_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint64_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint64_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint8_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint128_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint64_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint8_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint16_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_bool_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint64_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint16_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint16_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint16_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint32_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint8_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint16_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_bool_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint16_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint8_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint256_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint8_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint8_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint16_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint64_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint256_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint32_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_bool_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_bool_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint8_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint32_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint16_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint256_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint128_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint128_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint256_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint128_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint64_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint32_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint256_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint64_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint128_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint64_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_bool_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint16_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint256_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint16_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint16_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint256_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint32_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint8_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint128_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint256_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint16_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint32_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint8_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint64_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint128_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint16_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint8_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint128_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint32_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint64_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint128_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint16_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint64_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint64_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint256_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint16_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint16_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_bool_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_bool_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint16_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint256_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint64_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint64_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint32_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_bool_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint32_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint64_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_bool_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint128_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint128_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_bool_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint256_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_bool_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint128_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint32_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint8_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint32_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint32_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint8_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint256_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_bool_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint256_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint32_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint16_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_bool_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint128_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint8_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint256_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint16_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint128_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint64_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint32_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint16_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint16_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint128_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint16_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint256_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint256_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint8_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint256_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint128_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint8_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint16_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint256_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint256_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint128_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint16_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint8_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint16_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint32_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_bool_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint32_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint128_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint8_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint16_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_bool_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint128_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_bool_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint16_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint128_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint256_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint64_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint256_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint64_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_bool_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint32_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint64_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint16_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint16_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint16_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint32_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint16_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint32_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint8_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_bool_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint256_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint32_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint16_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint16_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint128_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint8_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint256_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint16_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint8_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint32_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint128_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint128_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint64_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint64_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint8_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint16_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint16_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint8_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint16_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint256_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint128_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint32_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint8_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint256_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint256_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint64_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint256_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint8_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint8_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint128_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint32_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint16_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint16_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint16_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint8_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_bool_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint128_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint256_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint256_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint32_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint128_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint64_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint8_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint8_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint128_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint8_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint256_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint32_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint64_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_bool_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint8_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint256_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint64_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint64_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint128_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint64_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint32_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_bool_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint16_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint8_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint128_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint16_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint128_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint8_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint64_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint16_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint32_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint128_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint256_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint8_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint64_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint128_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint128_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint8_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint128_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint64_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_bool_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint16_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint8_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint16_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint32_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint8_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint256_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint32_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint64_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint8_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint32_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint16_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_bool_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_bool_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint128_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint128_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint128_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint32_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint32_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint32_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint8_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint16_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint8_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint64_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint128_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint128_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint64_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint64_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint256_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint256_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint256_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint256_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint256_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_bool_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint16_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint64_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint8_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint32_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint32_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint32_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint128_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_bool_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint32_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_bool_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint8_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint256_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint128_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint32_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint256_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint16_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_bool_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint16_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint128_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint16_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint256_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint64_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint128_3_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint64_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_bool_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint32_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint256_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint256_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint32_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint256_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint64_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint64_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint8_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint32_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint64_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint32_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint8_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint32_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint64_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint8_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint16_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint64_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint32_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint16_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint256_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint128_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint256_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint256_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint128_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint64_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint32_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint16_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint64_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint128_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint256_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint128_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint8_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_bool_2_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint8_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint32_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_bool_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint64_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint64_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint128_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint16_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint128_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint32_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint64_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint256_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_bool_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_bool_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint64_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint128_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint256_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint8_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint128_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint16_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint8_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint256_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint256_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint128_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint64_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint16_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint32_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint256_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint8_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint256_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint256_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint64_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_bool_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint32_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint256_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint256_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_bool_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint256_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint16_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint64_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint128_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint8_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint16_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint8_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint128_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint16_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint128_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint256_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint64_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint256_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint256_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint16_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_bool_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint256_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint16_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint128_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint128_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint16_5_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint64_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint16_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_bool_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint256_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint8_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_bool_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint64_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint32_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint8_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint64_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint16_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint16_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint32_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint128_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint128_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint256_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint32_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint128_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint8_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint128_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint8_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint8_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint32_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint32_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint64_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint8_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint8_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_bool_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint256_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint64_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint64_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint128_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint64_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint8_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint8_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint64_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint16_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint64_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint64_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint64_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint128_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_bool_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint16_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint128_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint32_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint16_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_bool_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint16_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint8_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint256_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint128_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint64_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint128_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint32_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint256_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint16_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint64_4_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint256_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint8_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint64_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint256_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint8_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint256_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint32_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint32_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint32_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint8_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint64_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint128_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint16_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint128_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint16_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_bool_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint128_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint8_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_bool_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint256_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint64_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint256_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_bool_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint8_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint128_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint32_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_16_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint8_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint128_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_bool_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint64_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint8_512_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint128_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint128_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint64_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint128_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint256_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_bool_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint16_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint64_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_bool_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint32_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_bool_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint128_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_bool_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint32_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint8_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint32_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint32_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_bool_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint64_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint16_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint16_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint16_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint32_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint32_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_bool_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint128_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint8_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint32_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint8_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint256_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint8_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_bool_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint64_31_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint32_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint32_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint8_31_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint64_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_bool_1_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint64_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint16_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint32_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_bool_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint32_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint256_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint256_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint64_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_bool_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint16_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint128_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint16_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint32_1_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint32_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint128_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint8_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint16_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint8_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint64_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint256_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint16_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint64_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint32_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint16_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint32_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint16_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint8_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint8_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint128_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint128_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint256_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint32_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint8_512_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint64_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint128_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint128_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint256_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint32_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint8_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint32_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint64_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint16_2_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_bool_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint128_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint16_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint128_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint32_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_bool_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint256_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint16_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint128_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint8_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint32_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint16_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint256_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint8_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint64_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint64_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint64_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint256_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_bool_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint256_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint256_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint64_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint128_1_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint64_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint128_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_bool_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint32_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint16_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_bool_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint256_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_bool_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint256_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint64_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint32_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint256_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_bool_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint32_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint128_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_bool_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint8_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint256_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint256_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint8_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint16_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint8_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_bool_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint256_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint16_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_bool_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint8_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_bool_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_bool_512_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint64_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint8_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint64_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint128_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint16_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint128_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint256_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint128_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint128_513_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint256_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint16_8_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint64_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint128_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint8_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint256_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint16_3_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint16_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint16_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint8_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint256_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint64_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint32_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint32_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint64_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_bool_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_512, allocator, test_dir);
}

test "Invalid - vec_uint32_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint256_3_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint128_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint32_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint64_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint64_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint128_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint32_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint128_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint128_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint32_513_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint64_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint8_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint256_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint128_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint16_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint64_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint128_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint8_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint128_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint64_5_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_bool_31_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint16_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint32_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint64_1_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint32_1_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint32_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_bool_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint128_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint32_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint32_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint16_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint8_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint128_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_bool_16_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_bool_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint32_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint8_16_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint16_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint32_16_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint16_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint256_8_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint16_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint32_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint128_513_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint32_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint64_8_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint256_16_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_uint8_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_1, allocator, test_dir);
}

test "Invalid - vec_uint64_2_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint16_1_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_bool_8_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_bool_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint8_16_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint32_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_uint32_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint16_3_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint64_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint8_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint8_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint256_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint128_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint8_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint64_2_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_bool_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_513, allocator, test_dir);
}

test "Invalid - vec_uint32_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_1, allocator, test_dir);
}

test "Invalid - vec_bool_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint64_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint128_513_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_bool_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint16_5_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_5_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_5, allocator, test_dir);
}

test "Invalid - vec_uint64_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_2, allocator, test_dir);
}

test "Invalid - vec_uint32_513_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint8_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint16_1_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint256_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint256_8_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint32_3_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint128_1_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint16_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint128_31_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_31_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_31, allocator, test_dir);
}

test "Invalid - vec_uint32_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint64_512_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint8_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_bool_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_5, allocator, test_dir);
}

test "Invalid - vec_uint32_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint32_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint256_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint64_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint32_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint64_16_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint32_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint128_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint8_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint8_5_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint16_31_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint256_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_3, allocator, test_dir);
}

test "Invalid - vec_uint64_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_16, allocator, test_dir);
}

test "Invalid - vec_uint8_513_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint32_16_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_16_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_16, allocator, test_dir);
}

test "Invalid - vec_uint128_16_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_16_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_16, allocator, test_dir);
}

test "Invalid - vec_uint256_4_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_bool_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_31, allocator, test_dir);
}

test "Invalid - vec_uint64_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint256_5_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint16_2_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint128_1_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint8_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint16_513_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint256_1_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_bool_2_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_2_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_2, allocator, test_dir);
}

test "Invalid - vec_uint16_16_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint64_512_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint256_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint8_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint8_512_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint256_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint16_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_3, allocator, test_dir);
}

test "Invalid - vec_uint32_8_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint128_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint128_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_1, allocator, test_dir);
}

test "Invalid - vec_uint32_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_16, allocator, test_dir);
}

test "Invalid - vec_uint32_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint32_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint16_4_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint32_8_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_8_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_8, allocator, test_dir);
}

test "Invalid - vec_uint8_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint256_1_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_1_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_1, allocator, test_dir);
}

test "Invalid - vec_uint128_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint8_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint64_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_bool_3_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_3_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_3, allocator, test_dir);
}

test "Invalid - vec_uint128_2_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint256_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint64_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint32_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_uint8_2_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_2_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_2, allocator, test_dir);
}

test "Invalid - vec_uint8_5_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint32_31_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint8_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_uint8_513_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_513_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_513, allocator, test_dir);
}

test "Invalid - vec_bool_8_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_8_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_8, allocator, test_dir);
}

test "Invalid - vec_uint16_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_1, allocator, test_dir);
}

test "Invalid - vec_uint64_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint32_5_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint128_2_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint32_3_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_3_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_3, allocator, test_dir);
}

test "Invalid - vec_uint128_4_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_4_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_4, allocator, test_dir);
}

test "Invalid - vec_uint128_512_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_512_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_512, allocator, test_dir);
}

test "Invalid - vec_uint256_8_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint64_31_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_bool_4_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint256_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_513, allocator, test_dir);
}

test "Invalid - vec_uint32_512_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint16_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint8_5_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_5_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_5, allocator, test_dir);
}

test "Invalid - vec_uint64_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint256_5_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint256_4_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint64_513_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint32_5_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_5_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_5, allocator, test_dir);
}

test "Invalid - vec_uint64_512_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint64_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_31, allocator, test_dir);
}

test "Invalid - vec_uint16_31_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_31_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_31, allocator, test_dir);
}

test "Invalid - vec_uint64_8_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint8_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_512, allocator, test_dir);
}

test "Invalid - vec_uint32_4_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint64_4_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_4_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_4, allocator, test_dir);
}

test "Invalid - vec_uint64_3_max_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_max_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint256_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_5, allocator, test_dir);
}

test "Invalid - vec_uint64_3_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_3_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_3, allocator, test_dir);
}

test "Invalid - vec_uint32_4_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_4_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_4, allocator, test_dir);
}

test "Invalid - vec_uint32_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_2, allocator, test_dir);
}

test "Invalid - vec_bool_4_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint64_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_uint8_31_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Invalid - vec_uint32_513_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_513_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_513, allocator, test_dir);
}

test "Invalid - vec_uint32_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_31, allocator, test_dir);
}

test "Invalid - vec_uint16_2_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint64_5_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_5_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_5, allocator, test_dir);
}

test "Invalid - vec_bool_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_16, allocator, test_dir);
}

test "Invalid - vec_uint64_512_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_512_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_512, allocator, test_dir);
}

test "Invalid - vec_uint16_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_8, allocator, test_dir);
}

test "Invalid - vec_uint256_16_zero_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_16_zero_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_16, allocator, test_dir);
}

test "Invalid - vec_bool_4_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_4_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_4, allocator, test_dir);
}

test "Invalid - vec_uint256_31_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint128_3_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint8_3_zero_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_zero_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint64_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_8, allocator, test_dir);
}

test "Invalid - vec_uint16_16_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_bool_1_max_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_bool_1_max_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_bool_1, allocator, test_dir);
}

test "Invalid - vec_uint16_2_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_2_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_2, allocator, test_dir);
}

test "Invalid - vec_uint128_8_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_8_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_8, allocator, test_dir);
}

test "Invalid - vec_uint32_512_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint32_512_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint32_512, allocator, test_dir);
}

test "Invalid - vec_uint256_31_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint256_512_zero_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_512_zero_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_512, allocator, test_dir);
}

test "Invalid - vec_uint64_513_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_513_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_513, allocator, test_dir);
}

test "Invalid - vec_uint128_2_random_one_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_2_random_one_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_2, allocator, test_dir);
}

test "Invalid - vec_uint8_3_max_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_3_max_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_3, allocator, test_dir);
}

test "Invalid - vec_uint128_5_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint8_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_4, allocator, test_dir);
}

test "Invalid - vec_uint128_513_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_513_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_513, allocator, test_dir);
}

test "Invalid - vec_uint256_4_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_4_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_4, allocator, test_dir);
}

test "Invalid - vec_uint128_3_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_3_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_3, allocator, test_dir);
}

test "Invalid - vec_uint16_513_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_513_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_513, allocator, test_dir);
}

test "Invalid - vec_uint64_1_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint64_1_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint64_1, allocator, test_dir);
}

test "Invalid - vec_uint16_512_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_512_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_512, allocator, test_dir);
}

test "Invalid - vec_uint256_2_max_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_2_max_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_2, allocator, test_dir);
}

test "Invalid - vec_uint16_16_random_one_byte_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_16_random_one_byte_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_16, allocator, test_dir);
}

test "Invalid - vec_uint8_8_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_8_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_8, allocator, test_dir);
}

test "Invalid - vec_uint256_31_nil" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_31_nil"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_31, allocator, test_dir);
}

test "Invalid - vec_uint128_5_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint128_5_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint128_5, allocator, test_dir);
}

test "Invalid - vec_uint256_8_zero_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint256_8_zero_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint256_8, allocator, test_dir);
}

test "Invalid - vec_uint16_4_random_one_less" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint16_4_random_one_less"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint16_4, allocator, test_dir);
}

test "Invalid - vec_uint8_31_random_one_byte_more" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "basic_vector",
        "invalid",
        "vec_uint8_31_random_one_byte_more"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.vec_uint8_31, allocator, test_dir);
}

test "Valid - BitsStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_max_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_max_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_one_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_one_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_zero_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_zero_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_lengthy_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_lengthy_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_nil_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_nil_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_max_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_max_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_one_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_one_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_zero_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_zero_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_8",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_9",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_max_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_max_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_one_chaos_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_one_chaos_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_random_7" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_random_7",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SingleFieldTestStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SingleFieldTestStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SingleFieldTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_nil_chaos_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_nil_chaos_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - ComplexTestStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/ComplexTestStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.ComplexTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_max_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_max_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_5",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - VarTestStruct_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/VarTestStruct_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.VarTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - SmallTestStruct_zero_chaos_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/SmallTestStruct_zero_chaos_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.SmallTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - FixedTestStruct_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/FixedTestStruct_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.FixedTestStruct, allocator, test_dir, "meta.yaml");
}

test "Valid - BitsStruct_zero_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers/valid/BitsStruct_zero_6",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.BitsStruct, allocator, test_dir, "meta.yaml");
}

test "Invalid - ComplexTestStruct_lengthy_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_0_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_0_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_10_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_10_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - SmallTestStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "SmallTestStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.SmallTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_last_offset_0_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_last_offset_0_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_0_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_0_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_0_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_0_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_11_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_11_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_6_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_6_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_random_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_random_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_10_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_10_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_nil_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_nil_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_last_offset_2_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_last_offset_2_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_10_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_10_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_lengthy_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_lengthy_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_6_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_6_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_lengthy_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_lengthy_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_last_offset_11_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_last_offset_11_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_0_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_0_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_0_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_0_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_6_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_6_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_nil_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_nil_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_last_offset_0_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_last_offset_0_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_11_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_11_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_last_offset_6_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_last_offset_6_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_0_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_0_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_last_offset_10_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_last_offset_10_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_7_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_7_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_7_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_7_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_10_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_10_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_7_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_7_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_6_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_6_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_lengthy_last_offset_2_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_lengthy_last_offset_2_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_11_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_11_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_6_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_6_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_0_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_0_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_6_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_6_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_7_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_7_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_last_offset_10_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_last_offset_10_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_nil_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_nil_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - SingleFieldTestStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "SingleFieldTestStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.SingleFieldTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_6_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_6_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_11_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_11_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_11_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_11_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_10_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_10_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_7_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_7_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_10_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_10_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_last_offset_2_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_last_offset_2_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_11_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_11_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_one_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_one_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_11_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_11_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_0_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_0_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_one_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_one_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_7_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_7_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_random_offset_0_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_random_offset_0_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_random_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_random_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_0_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_0_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_random_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_random_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_lengthy_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_lengthy_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_lengthy_offset_0_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_lengthy_offset_0_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_last_offset_7_overflow" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_last_offset_7_overflow"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_nil_offset_7_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_nil_offset_7_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_2_minus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_2_minus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_last_offset_7_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_last_offset_7_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_0_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_0_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_one_last_offset_2_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_one_last_offset_2_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_nil_offset_6_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_nil_offset_6_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_7_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_7_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_random_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_random_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - FixedTestStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "FixedTestStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.FixedTestStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_one_offset_2_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_one_offset_2_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_10_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_10_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_last_offset_11_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_last_offset_11_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_one_offset_11_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_one_offset_11_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Invalid - VarTestStruct_extra_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "VarTestStruct_extra_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.VarTestStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_offset_10_plus_one" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_offset_10_plus_one"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - BitsStruct_one_last_offset_6_wrong_byte_length" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "BitsStruct_one_last_offset_6_wrong_byte_length"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.BitsStruct, allocator, test_dir);
}

test "Invalid - ComplexTestStruct_lengthy_offset_2_zeroed" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "containers",
        "invalid",
        "ComplexTestStruct_lengthy_offset_2_zeroed"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.ComplexTestStruct, allocator, test_dir);
}

test "Valid - bitvec_8_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_8_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_16_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_16_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_3_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_3_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_5_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_5_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_1_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_1_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_513_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_513_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_8_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_8_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_5_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_5_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_2_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_2_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_512_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_512_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_16_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_16_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_2_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_2_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_5_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_5_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_1_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_1_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_31_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_31_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_16_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_16_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_4_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_4_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_31_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_31_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_2_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_2_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_1_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_1_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_31_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_31_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_8_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_8_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_3_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_3_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_513_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_513_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_513_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_513_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_4_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_4_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_512_zero" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_512_zero",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_4_random" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_4_random",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_3_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_3_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitvec_512_max" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector/valid/bitvec_512_max",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitvec_512, allocator, test_dir, "meta.yaml");
}

test "Invalid - bitvec_3_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_3_max_4"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_3, allocator, test_dir);
}

test "Invalid - bitvec_1_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_1_max_2"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_1, allocator, test_dir);
}

test "Invalid - bitvec_9_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_9_random_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_9, allocator, test_dir);
}

test "Invalid - bitvec_8_zero_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_8_zero_9"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_8, allocator, test_dir);
}

test "Invalid - bitvec_1_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_1_random_2"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_1, allocator, test_dir);
}

test "Invalid - bitvec_2_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_2_max_3"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_2, allocator, test_dir);
}

test "Invalid - bitvec_8_max_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_8_max_9"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_8, allocator, test_dir);
}

test "Invalid - bitvec_16_max_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_16_max_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_16, allocator, test_dir);
}

test "Invalid - bitvec_512_random_513" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_512_random_513"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_512, allocator, test_dir);
}

test "Invalid - bitvec_5_random_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_5_random_6"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_5, allocator, test_dir);
}

test "Invalid - bitvec_4_zero_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_4_zero_5"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_4, allocator, test_dir);
}

test "Invalid - bitvec_16_zero_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_16_zero_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_16, allocator, test_dir);
}

test "Invalid - bitvec_4_random_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_4_random_5"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_4, allocator, test_dir);
}

test "Invalid - bitvec_16_random_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_16_random_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_16, allocator, test_dir);
}

test "Invalid - bitvec_32_zero_33" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_32_zero_33"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_32, allocator, test_dir);
}

test "Invalid - bitvec_3_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_3_random_4"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_3, allocator, test_dir);
}

test "Invalid - bitvec_32_random_33" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_32_random_33"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_32, allocator, test_dir);
}

test "Invalid - bitvec_9_max_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_9_max_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_9, allocator, test_dir);
}

test "Invalid - bitvec_2_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_2_random_3"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_2, allocator, test_dir);
}

test "Invalid - bitvec_512_zero_513" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_512_zero_513"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_512, allocator, test_dir);
}

test "Invalid - bitvec_512_max_513" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_512_max_513"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_512, allocator, test_dir);
}

test "Invalid - bitvec_9_zero_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_9_zero_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_9, allocator, test_dir);
}

test "Invalid - bitvec_2_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_2_zero_3"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_2, allocator, test_dir);
}

test "Invalid - bitvec_5_zero_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_5_zero_6"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_5, allocator, test_dir);
}

test "Invalid - bitvec_32_max_33" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_32_max_33"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_32, allocator, test_dir);
}

test "Invalid - bitvec_3_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_3_zero_4"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_3, allocator, test_dir);
}

test "Invalid - bitvec_4_max_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_4_max_5"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_4, allocator, test_dir);
}

test "Invalid - bitvec_8_random_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_8_random_9"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_8, allocator, test_dir);
}

test "Invalid - bitvec_1_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_1_zero_2"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_1, allocator, test_dir);
}

test "Invalid - bitvec_5_max_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitvector",
        "invalid",
        "bitvec_5_max_6"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitvec_5, allocator, test_dir);
}

test "Valid - bitlist_2_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_random_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_random_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_lengthy_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_lengthy_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_nil_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_nil_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_nil_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_nil_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_random_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_random_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_nil_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_nil_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_lengthy_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_lengthy_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_nil_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_nil_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_random_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_random_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_zero_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_zero_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_max_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_max_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_nil_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_nil_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_3_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_3_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_3, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_max_0" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_max_0",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_random_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_random_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_5_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_5_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_5, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_lengthy_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_lengthy_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_zero_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_zero_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_512_max_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_512_max_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_512, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_31_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_31_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_31, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_lengthy_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_lengthy_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_513_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_513_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_513, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_8_lengthy_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_8_lengthy_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_8, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_max_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_max_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_max_1" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_max_1",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_16_random_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_16_random_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_16, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_2_zero_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_2_zero_2",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_2, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_1_zero_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_1_zero_3",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_1, allocator, test_dir, "meta.yaml");
}

test "Valid - bitlist_4_zero_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist/valid/bitlist_4_zero_4",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.bitlist_4, allocator, test_dir, "meta.yaml");
}

test "Invalid - bitlist_no_delimiter_zeroes" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_no_delimiter_zeroes"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_no, allocator, test_dir);
}

test "Invalid - bitlist_3_but_4" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_3_but_4"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_3, allocator, test_dir);
}

test "Invalid - bitlist_512_but_513" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_512_but_513"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_512, allocator, test_dir);
}

test "Invalid - bitlist_32_but_33" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_32_but_33"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_32, allocator, test_dir);
}

test "Invalid - bitlist_1_but_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_1_but_2"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_1, allocator, test_dir);
}

test "Invalid - bitlist_8_but_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_8_but_9"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_8, allocator, test_dir);
}

test "Invalid - bitlist_5_but_6" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_5_but_6"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_5, allocator, test_dir);
}

test "Invalid - bitlist_2_but_3" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_2_but_3"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_2, allocator, test_dir);
}

test "Invalid - bitlist_1_but_9" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_1_but_9"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_1, allocator, test_dir);
}

test "Invalid - bitlist_1_but_8" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_1_but_8"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_1, allocator, test_dir);
}

test "Invalid - bitlist_no_delimiter_zero_byte" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_no_delimiter_zero_byte"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_no, allocator, test_dir);
}

test "Invalid - bitlist_4_but_5" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_4_but_5"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_4, allocator, test_dir);
}

test "Invalid - bitlist_no_delimiter_empty" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_no_delimiter_empty"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_no, allocator, test_dir);
}

test "Invalid - bitlist_32_but_64" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "bitlist",
        "invalid",
        "bitlist_32_but_64"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.bitlist_32, allocator, test_dir);
}

test "Valid - true" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean/valid/true",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.boolean, allocator, test_dir, "meta.yaml");
}

test "Valid - false" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean/valid/false",
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.validTestCase(types.boolean, allocator, test_dir, "meta.yaml");
}

test "Invalid - byte_full" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean",
        "invalid",
        "byte_full"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.boolean, allocator, test_dir);
}

test "Invalid - byte_2" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean",
        "invalid",
        "byte_2"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.boolean, allocator, test_dir);
}

test "Invalid - byte_0x80" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean",
        "invalid",
        "byte_0x80"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.boolean, allocator, test_dir);
}

test "Invalid - byte_rev_nibble" {
    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        generic_tests_dir_name,
        "boolean",
        "invalid",
        "byte_rev_nibble"
    });
    defer allocator.free(test_dir_name);

    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{});
    try test_case.invalidTestCase(types.boolean, allocator, test_dir);
}

