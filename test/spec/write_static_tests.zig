const std = @import("std");
const spec_test_options = @import("spec_test_options");

pub fn main() !void {
    const allocator = std.heap.page_allocator;

    // minimal preset includes many more testcases
    // so use that for generating tests
    const preset_str = "minimal";

    const out = try std.fs.cwd().createFile("test/spec/static_tests.zig", .{});
    defer out.close();

    var writer = out.writer().any();

    try writer.writeAll(
        \\// This file is generated by write_static_tests.zig.
        \\// Do not commit changes by hand.
        \\
        \\const std = @import("std");
        \\const spec_test_options = @import("spec_test_options");
        \\const build_options = @import("build_options");
        \\const types = @import("consensus_types");
        \\const test_case = @import("test_case.zig");
        \\
        \\const allocator = std.testing.allocator;
        \\
        \\
    );

    const preset_tests_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        preset_str,
        "tests",
        preset_str,
    });
    defer allocator.free(preset_tests_dir_name);

    const supported_forks = [_][]const u8{
        "phase0",
        "altair",
        "bellatrix",
        "capella",
        "deneb",
        "electra",
    };

    for (supported_forks) |fork| {
        const static_tests_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
            preset_tests_dir_name,
            fork,
            "ssz_static",
        });
        defer allocator.free(static_tests_dir_name);

        const static_tests_dir = try std.fs.cwd().openDir(static_tests_dir_name, .{ .iterate = true });
        var static_tests_dir_it = static_tests_dir.iterate();
        while (try static_tests_dir_it.next()) |g_test_entry| {
            switch (g_test_entry.kind) {
                .directory => {},
                else => {
                    continue;
                },
            }

            const type_name = g_test_entry.name;

            const type_name_tests_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
                static_tests_dir_name,
                type_name,
            });
            defer allocator.free(type_name_tests_dir_name);

            const type_name_tests_dir = try std.fs.cwd().openDir(type_name_tests_dir_name, .{ .iterate = true });
            var type_name_tests_dir_it = type_name_tests_dir.iterate();
            while (try type_name_tests_dir_it.next()) |type_name_test_entry| {
                switch (g_test_entry.kind) {
                    .directory => {},
                    else => {
                        continue;
                    },
                }

                const test_suite_name = type_name_test_entry.name;

                const test_suite_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
                    type_name_tests_dir_name,
                    test_suite_name,
                });
                defer allocator.free(test_suite_dir_name);

                const test_suite_dir = try std.fs.cwd().openDir(test_suite_dir_name, .{ .iterate = true });
                var test_suite_dir_it = test_suite_dir.iterate();
                while (try test_suite_dir_it.next()) |test_suite_entry| {
                    switch (g_test_entry.kind) {
                        .directory => {},
                        else => {
                            continue;
                        },
                    }

                    const test_case_name = test_suite_entry.name;

                    try writeStaticTest(
                        writer,
                        fork,
                        type_name,
                        test_suite_name,
                        test_case_name,
                    );
                }
            }
        }
    }
}

/// Assumes the following global decls
/// - std, allocator, spec_test_options, generic_tests_dir_name, test_case, {tests_dir}, types.{type_name}
fn writeStaticTest(
    writer: std.io.AnyWriter,
    fork: []const u8,
    type_name: []const u8,
    test_suite_name: []const u8,
    test_name: []const u8,
) !void {
    try writer.print(
        \\test "Static - {s} {s} {s} {s}" {{
        \\    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{{
        \\        spec_test_options.spec_test_out_dir,
        \\        spec_test_options.spec_test_version,
        \\        build_options.preset,
        \\        "tests",
        \\        build_options.preset,
        \\        "{s}/ssz_static/{s}/{s}/{s}",
        \\    }});
        \\    defer allocator.free(test_dir_name);
        \\
        \\    const test_dir = std.fs.cwd().openDir(test_dir_name, .{{}}) catch return error.SkipZigTest;
        \\    try test_case.validTestCase(types.{s}.{s}, allocator, test_dir, "roots.yaml");
        \\}}
        \\
        \\
    ,
        .{
            fork,
            type_name,
            test_suite_name,
            test_name,
            fork,
            type_name,
            test_suite_name,
            test_name,
            fork,
            type_name,
        },
    );
}
